/* Copyright 2013 Robert Edward Steckroth II <RobertSteckroth@gmail.com> Bust0ut, Surgemcgee

* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; version 3.
/* Copyright 2013 Robert Edward Steckroth II <RobertSteckroth@gmail.com> Bust0ut, Surgemcgee

* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; version 3.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

var EventEmitter = require('events').EventEmitter

function log(message) {
    console.log('[object parse] '+message)
}

ObjectParse = function() { 
    this.event = new EventEmitter()
}


ObjectParse.prototype = {

    on: function(ev_name, cb) {
        if ( !cb ) return
        this.event.on(ev_name, cb)
    },
        

    parse_cli: function() { 
        var argument = [], json_obj = '{', p_len = process.argv.length
        for ( var x = 0; x < p_len; x++ ) {
            argument = process.argv[x].split('=')
            if ( argument.length === 2 )  
               json_obj += '"'+argument[0].toString()+'":'+ (argument[1].match(/\'/) ? JSON.stringify(argument[1]) : argument[1]) + (x < p_len-1 ? ',' : '')
        }
        return JSON.parse(json_obj+'}')
    },

    _options: function() { return this },
    _settings: function() { return this },
    
    configure: function(callback) {
        var has_option = false

        for ( var s in this._settings )
            if ( !this._options[s] ) 
                console.log('Warning: option "'+s+'" does not exist in options.')

        for ( var o in this._options )  {
            has_option = false
            if ( this._options[o].length <= 1 && typeof this._settings[o] === 'undefined' )
                this._settings[o] = this._options[o][0]
            else
                for ( var i = 0; i < this._options[o].length; i++ ) 
                    if ( this._settings[o] === this._options[o][i] || typeof this._settings[o] === 'undefined' ) {
                        this._settings[o] = this._options[o][i]
                        has_option = true
                        break
                    }

            if ( !has_option && this._options[o].length > 1 ) { 
                var setting_with_type = typeof this._settings[o] + '['+this._settings[o]+']'
                var options_with_type = ''
                for ( var v in this._options[o] )
                    options_with_type += typeof this._options[o][v] + '['+this._options[o][v]+'] '
                console.log('Warning: option: '+o+', does not contain a setting: '+setting_with_type+'. Available options are: '+options_with_type)
                this._settings[o] = this._options[o][0]
            }     
        }       
        this.event.emit('settings_changed')
        return this._settings
    }
}

// Make sure these getter/setters are below the object inherentance to prevent over-ride
ObjectParse.prototype.__defineSetter__('options', function() { console.log('Unable to set options directly') }) 
ObjectParse.prototype.__defineGetter__('options', function() {  
    return function() { 
        for ( var i in arguments )
            for ( var y in arguments[i] )  
                if ( arguments[i][y].constructor === Array ) // Options only accepts arrays
                     this._options[y] = arguments[i][y]
            if ( arguments.length ) 
                this.configure()
            return this._options.call(this._options)
            }
})

// Make sure these getter/setters are below the object inherentance to prevent over-ride
ObjectParse.prototype.__defineSetter__('settings', function() { console.log('Unable to set settings directly') }) 
ObjectParse.prototype.__defineGetter__('settings', function() {  
    return function() { 
        for ( var i in arguments )
            for ( var y in arguments[i] )  
                this._settings[y] = arguments[i][y]
        if ( arguments.length )
             this.configure()
        return this._settings.call(this._settings)
            }
})


ObjectParse_global = new ObjectParse()

module.exports = ObjectParse 






